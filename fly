-- Flying Script with Enhanced Features
-- Optimized for Roblox Executors

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

-- Configuration
local FLYING = false
local NOCLIP = false
local SEA_MODE = false
local AUTO_ACTIVATE = false
local SAVED_POSITION = nil
local LAST_HEALTH_PERCENT = 100
local HEALTH_THRESHOLD = 50
local TELEPORT_HEIGHT = 1000
local FLYING_SPEED = 50
local BOOST_MULTIPLIER = 2
local COMMAND_GUI_VISIBLE = false

-- Keybinds
local FLY_KEY = Enum.KeyCode.F
local BOOST_KEY = Enum.KeyCode.LeftShift
local NOCLIP_KEY = Enum.KeyCode.X
local SEA_KEY = Enum.KeyCode.C
local COMMAND_KEY = Enum.KeyCode.Semicolon

-- Create GUI
local function createGui()
    -- Check if GUI already exists in CoreGui
    if CoreGui:FindFirstChild("FlyingScriptGui") then
        CoreGui.FlyingScriptGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FlyingScriptGui"
    screenGui.ResetOnSpawn = false
    
    -- Try to use CoreGui for better persistence with executors
    local success, err = pcall(function()
        screenGui.Parent = CoreGui
    end)
    
    if not success then
        screenGui.Parent = player.PlayerGui
    end
    
    -- Status Frame
    local statusFrame = Instance.new("Frame")
    statusFrame.Name = "StatusFrame"
    statusFrame.Size = UDim2.new(0, 200, 0, 120)
    statusFrame.Position = UDim2.new(0, 10, 0, 10)
    statusFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusFrame.BackgroundTransparency = 0.3
    statusFrame.BorderSizePixel = 0
    statusFrame.Parent = screenGui
    
    -- Round corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 8)
    uiCorner.Parent = statusFrame
    
    -- Status Labels
    local flyStatus = Instance.new("TextLabel")
    flyStatus.Name = "FlyStatus"
    flyStatus.Size = UDim2.new(1, 0, 0, 25)
    flyStatus.Position = UDim2.new(0, 0, 0, 0)
    flyStatus.BackgroundTransparency = 1
    flyStatus.Text = "Flying: OFF"
    flyStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyStatus.TextSize = 14
    flyStatus.Font = Enum.Font.GothamBold
    flyStatus.Parent = statusFrame
    
    local noclipStatus = Instance.new("TextLabel")
    noclipStatus.Name = "NoclipStatus"
    noclipStatus.Size = UDim2.new(1, 0, 0, 25)
    noclipStatus.Position = UDim2.new(0, 0, 0, 25)
    noclipStatus.BackgroundTransparency = 1
    noclipStatus.Text = "Phase: OFF"
    noclipStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    noclipStatus.TextSize = 14
    noclipStatus.Font = Enum.Font.GothamBold
    noclipStatus.Parent = statusFrame
    
    local seaStatus = Instance.new("TextLabel")
    seaStatus.Name = "SeaStatus"
    seaStatus.Size = UDim2.new(1, 0, 0, 25)
    seaStatus.Position = UDim2.new(0, 0, 0, 50)
    seaStatus.BackgroundTransparency = 1
    seaStatus.Text = "SEA Mode: OFF"
    seaStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    seaStatus.TextSize = 14
    seaStatus.Font = Enum.Font.GothamBold
    seaStatus.Parent = statusFrame
    
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "SpeedLabel"
    speedLabel.Size = UDim2.new(1, 0, 0, 25)
    speedLabel.Position = UDim2.new(0, 0, 0, 75)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "Speed: " .. FLYING_SPEED
    speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedLabel.TextSize = 14
    speedLabel.Font = Enum.Font.GothamBold
    speedLabel.Parent = statusFrame
    
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.Size = UDim2.new(1, 0, 0, 25)
    healthLabel.Position = UDim2.new(0, 0, 0, 100)
    healthLabel.BackgroundTransparency = 1
    healthLabel.Text = "Health: 100%"
    healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    healthLabel.TextSize = 14
    healthLabel.Font = Enum.Font.GothamBold
    healthLabel.Parent = statusFrame
    
    -- Command List GUI
    local commandFrame = Instance.new("Frame")
    commandFrame.Name = "CommandFrame"
    commandFrame.Size = UDim2.new(0, 300, 0, 400)
    commandFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    commandFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    commandFrame.BackgroundTransparency = 0.2
    commandFrame.BorderSizePixel = 0
    commandFrame.Visible = false
    commandFrame.Parent = screenGui
    
    -- Round corners for command frame
    local cmdCorner = Instance.new("UICorner")
    cmdCorner.CornerRadius = UDim.new(0, 8)
    cmdCorner.Parent = commandFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    titleLabel.BackgroundTransparency = 0.2
    titleLabel.BorderSizePixel = 0
    titleLabel.Text = "Command List"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = commandFrame
    
    -- Round corners for title
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleLabel
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleLabel
    
    -- Round corners for close button
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 15)
    closeCorner.Parent = closeButton
    
    -- Scroll Frame for commands
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -50)
    scrollFrame.Position = UDim2.new(0, 10, 0, 45)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 600) -- Will be updated
    scrollFrame.Parent = commandFrame
    
    -- Command descriptions
    local commandsText = [[
<b>FLYING SCRIPT COMMANDS</b>

<b>CHAT COMMANDS:</b>
/fly - Toggle flying mode
/speed [number] - Set flying speed
/phase - Toggle phase/noclip mode
/sea - Toggle SEA mode (auto-ascend at low health)
/command - Show/hide this command list

<b>KEYBOARD SHORTCUTS:</b>
F - Toggle flying mode
X - Toggle phase/noclip mode
C - Toggle SEA mode
Left Shift - Boost speed while flying
; (semicolon) - Show/hide command list

<b>FLYING CONTROLS:</b>
W/A/S/D - Move in respective directions
Space - Move up
Left Ctrl - Move down
Left Shift - Boost speed (hold)

<b>SPECIAL FEATURES:</b>
- Phase mode allows you to pass through all objects
- SEA mode automatically teleports you upward when health drops below 50%
- When health recovers above 51%, you'll teleport back to your saved position
- Speed can be adjusted from 10 to 500

<b>TIPS:</b>
- Use phase mode to escape dangerous situations
- SEA mode is perfect for emergency escapes
- Combine flying with phase for maximum mobility
- Press F twice quickly to reset flying position
]]

    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "CommandsText"
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = commandsText
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextSize = 14
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.RichText = true
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    -- Close button event
    closeButton.MouseButton1Click:Connect(function()
        commandFrame.Visible = false
        COMMAND_GUI_VISIBLE = false
    end)
    
    return {
        statusFrame = statusFrame,
        flyStatus = flyStatus,
        noclipStatus = noclipStatus,
        seaStatus = seaStatus,
        speedLabel = speedLabel,
        healthLabel = healthLabel,
        commandFrame = commandFrame
    }
end

-- Flying mechanics
local flyGyro, flyVel
local function setupFly()
    local torso = character:FindFirstChild("HumanoidRootPart")
    if not torso then return end
    
    -- Clean up existing instances
    if flyGyro then flyGyro:Destroy() end
    if flyVel then flyVel:Destroy() end
    
    flyGyro = Instance.new("BodyGyro")
    flyGyro.P = 9e4
    flyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    flyGyro.CFrame = torso.CFrame
    flyGyro.Parent = torso
    
    flyVel = Instance.new("BodyVelocity")
    flyVel.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    flyVel.Velocity = Vector3.new(0, 0.1, 0)
    flyVel.Parent = torso
    
    -- Update GUI
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.StatusFrame.FlyStatus.Text = "Flying: ON"
        gui.StatusFrame.FlyStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
    end
end

local function stopFly()
    if flyGyro then flyGyro:Destroy() end
    if flyVel then flyVel:Destroy() end
    
    flyGyro = nil
    flyVel = nil
    
    -- Update GUI
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.StatusFrame.FlyStatus.Text = "Flying: OFF"
        gui.StatusFrame.FlyStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    end
end

-- Enhanced Noclip function
local function updateNoclip()
    if not character then return end
    
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not NOCLIP
        end
    end
    
    -- Update GUI
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.StatusFrame.NoclipStatus.Text = "Phase: " .. (NOCLIP and "ON" or "OFF")
        gui.StatusFrame.NoclipStatus.TextColor3 = NOCLIP and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
    end
end

-- SEA Mode function
local function updateSeaMode()
    -- Update GUI
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.StatusFrame.SeaStatus.Text = "SEA Mode: " .. (SEA_MODE and "ON" or "OFF")
        gui.StatusFrame.SeaStatus.TextColor3 = SEA_MODE and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
    end
end

-- Toggle command list
local function toggleCommandList()
    COMMAND_GUI_VISIBLE = not COMMAND_GUI_VISIBLE
    
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.CommandFrame.Visible = COMMAND_GUI_VISIBLE
    end
end

-- Process chat commands
local function onChatted(message)
    local lowerMsg = message:lower()
    
    if lowerMsg == "/fly" then
        FLYING = not FLYING
        if FLYING then
            setupFly()
        else
            stopFly()
        end
    elseif lowerMsg:sub(1, 7) == "/speed " then
        local speedStr = lowerMsg:sub(8)
        local speed = tonumber(speedStr)
        
        if speed then
            FLYING_SPEED = math.clamp(speed, 10, 500)
            
            -- Update GUI
            local gui = CoreGui:FindFirstChild("FlyingScriptGui")
            if gui then
                gui.StatusFrame.SpeedLabel.Text = "Speed: " .. FLYING_SPEED
            end
        end
    elseif lowerMsg == "/phase" then
        NOCLIP = not NOCLIP
        updateNoclip()
    elseif lowerMsg == "/sea" then
        SEA_MODE = not SEA_MODE
        updateSeaMode()
    elseif lowerMsg == "/command" then
        toggleCommandList()
    end
end

-- Health monitoring for SEA mode
local function monitorHealth()
    if not character or not humanoid then return end
    
    local currentHealth = humanoid.Health
    local maxHealth = humanoid.MaxHealth
    local healthPercent = math.floor((currentHealth / maxHealth) * 100)
    
    -- Update health display
    local gui = CoreGui:FindFirstChild("FlyingScriptGui")
    if gui then
        gui.StatusFrame.HealthLabel.Text = "Health: " .. healthPercent .. "%"
        
        -- Change color based on health
        if healthPercent < 30 then
            gui.StatusFrame.HealthLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
        elseif healthPercent < 70 then
            gui.StatusFrame.HealthLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
        else
            gui.StatusFrame.HealthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
        end
    end
    
    -- SEA mode logic
    if SEA_MODE then
        -- If health drops below threshold and we haven't saved position yet
        if healthPercent <= HEALTH_THRESHOLD and LAST_HEALTH_PERCENT > HEALTH_THRESHOLD then
            -- Save current position before teleporting up
            SAVED_POSITION = rootPart.CFrame
            
            -- Teleport upward
            rootPart.CFrame = CFrame.new(rootPart.Position.X, rootPart.Position.Y + TELEPORT_HEIGHT, rootPart.Position.Z)
        end
        
        -- If health recovers above threshold and we have a saved position
        if healthPercent > HEALTH_THRESHOLD and LAST_HEALTH_PERCENT <= HEALTH_THRESHOLD and SAVED_POSITION then
            -- Teleport back to saved position
            rootPart.CFrame = SAVED_POSITION
            SAVED_POSITION = nil
        end
    end
    
    LAST_HEALTH_PERCENT = healthPercent
end

-- Main flying control loop
local function flyLoop()
    if not FLYING then return end
    if not character or not rootPart then return end
    
    local camera = workspace.CurrentCamera
    local lookVector = camera.CFrame.LookVector
    local rightVector = camera.CFrame.RightVector
    
    -- Calculate movement direction
    local moveDirection = Vector3.new(0, 0, 0)
    
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        moveDirection = moveDirection + lookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
        moveDirection = moveDirection - lookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
        moveDirection = moveDirection - rightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
        moveDirection = moveDirection + rightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
        moveDirection = moveDirection + Vector3.new(0, 1, 0)
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
        moveDirection = moveDirection - Vector3.new(0, 1, 0)
    end
    
    -- Normalize if there's movement
    if moveDirection.Magnitude > 0 then
        moveDirection = moveDirection.Unit
    end
    
    -- Apply boost if shift is held
    local currentSpeed = FLYING_SPEED
    if UserInputService:IsKeyDown(BOOST_KEY) then
        currentSpeed = FLYING_SPEED * BOOST_MULTIPLIER
    end
    
    -- Update velocity
    if flyVel then
        flyVel.Velocity = moveDirection * currentSpeed
    end
    
    -- Update gyro
    if flyGyro then
        if moveDirection.Magnitude > 0 then
            flyGyro.CFrame = CFrame.lookAt(rootPart.Position, rootPart.Position + moveDirection)
        else
            flyGyro.CFrame = CFrame.lookAt(rootPart.Position, rootPart.Position + camera.CFrame.LookVector)
        end
    end
end

-- Initialize
local guiElements = createGui()

-- Connect player input
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == FLY_KEY then
        FLYING = not FLYING
        if FLYING then
            setupFly()
        else
            stopFly()
        end
    elseif input.KeyCode == NOCLIP_KEY then
        NOCLIP = not NOCLIP
        updateNoclip()
    elseif input.KeyCode == SEA_KEY then
        SEA_MODE = not SEA_MODE
        updateSeaMode()
    elseif input.KeyCode == COMMAND_KEY then
        toggleCommandList()
    end
end)

-- Connect chat
player.Chatted:Connect(onChatted)

-- Main loop
RunService.Heartbeat:Connect(function()
    flyLoop()
    monitorHealth()
    
    -- Ensure noclip stays active
    if NOCLIP then
        updateNoclip()
    end
    
    -- SEA mode continuous teleport when health is low
    if SEA_MODE and humanoid.Health / humanoid.MaxHealth * 100 <= HEALTH_THRESHOLD then
        -- Continuously teleport upward
        rootPart.CFrame = CFrame.new(rootPart.Position.X, rootPart.Position.Y + 10, rootPart.Position.Z)
    end
end)

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Reset states
    FLYING = false
    stopFly()
    NOCLIP = false
    updateNoclip()
    SAVED_POSITION = nil
    
    -- Reconnect health changed event
    LAST_HEALTH_PERCENT = 100
end)

-- Notification
StarterGui:SetCore("SendNotification", {
    Title = "Flying Script Loaded",
    Text = "Press F to fly, X for phase, C for SEA mode. Type /command for help.",
    Duration = 5
})

print("Flying Script with Enhanced Features loaded successfully!")
print("Press F to toggle flying, X for phase, C for SEA mode")
print("Type /command in chat to see all commands")
