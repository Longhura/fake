-- Flying Script with Enhanced Features
-- Optimized for Roblox Executors

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

-- Configuration
local FLYING = false
local NOCLIP = false
local SEA_MODE = false
local AUTO_ACTIVATE = false
local SAVED_POSITION = nil
local LOW_HEALTH_THRESHOLD = 50
local TELEPORT_HEIGHT = 1000
local SPEED = 50
local COMMANDS = {}
local COMMAND_GUI_VISIBLE = false
local LAST_HEALTH = humanoid.Health

-- Create GUI
local function createGui()
    -- Check if GUI already exists
    if CoreGui:FindFirstChild("FlyingScriptGui") then
        CoreGui:FindFirstChild("FlyingScriptGui"):Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FlyingScriptGui"
    screenGui.ResetOnSpawn = false
    
    -- Try to use CoreGui for better persistence
    pcall(function()
        screenGui.Parent = CoreGui
    end)
    
    -- Fallback to PlayerGui if CoreGui fails
    if not screenGui.Parent then
        screenGui.Parent = player:WaitForChild("PlayerGui")
    end
    
    -- Status Frame
    local statusFrame = Instance.new("Frame")
    statusFrame.Name = "StatusFrame"
    statusFrame.Size = UDim2.new(0, 200, 0, 120)
    statusFrame.Position = UDim2.new(0, 10, 0, 10)
    statusFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusFrame.BackgroundTransparency = 0.3
    statusFrame.BorderSizePixel = 0
    statusFrame.Parent = screenGui
    
    -- Round corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 8)
    uiCorner.Parent = statusFrame
    
    -- Status Labels
    local flyStatus = Instance.new("TextLabel")
    flyStatus.Name = "FlyStatus"
    flyStatus.Size = UDim2.new(1, -20, 0, 20)
    flyStatus.Position = UDim2.new(0, 10, 0, 10)
    flyStatus.BackgroundTransparency = 1
    flyStatus.Text = "Flying: OFF"
    flyStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyStatus.TextXAlignment = Enum.TextXAlignment.Left
    flyStatus.Font = Enum.Font.SourceSansBold
    flyStatus.TextSize = 16
    flyStatus.Parent = statusFrame
    
    local noclipStatus = Instance.new("TextLabel")
    noclipStatus.Name = "NoclipStatus"
    noclipStatus.Size = UDim2.new(1, -20, 0, 20)
    noclipStatus.Position = UDim2.new(0, 10, 0, 35)
    noclipStatus.BackgroundTransparency = 1
    noclipStatus.Text = "Noclip: OFF"
    noclipStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    noclipStatus.TextXAlignment = Enum.TextXAlignment.Left
    noclipStatus.Font = Enum.Font.SourceSansBold
    noclipStatus.TextSize = 16
    noclipStatus.Parent = statusFrame
    
    local seaStatus = Instance.new("TextLabel")
    seaStatus.Name = "SeaStatus"
    seaStatus.Size = UDim2.new(1, -20, 0, 20)
    seaStatus.Position = UDim2.new(0, 10, 0, 60)
    seaStatus.BackgroundTransparency = 1
    seaStatus.Text = "SEA Mode: OFF"
    seaStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    seaStatus.TextXAlignment = Enum.TextXAlignment.Left
    seaStatus.Font = Enum.Font.SourceSansBold
    seaStatus.TextSize = 16
    seaStatus.Parent = statusFrame
    
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "SpeedLabel"
    speedLabel.Size = UDim2.new(1, -20, 0, 20)
    speedLabel.Position = UDim2.new(0, 10, 0, 85)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "Speed: " .. SPEED
    speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedLabel.TextXAlignment = Enum.TextXAlignment.Left
    speedLabel.Font = Enum.Font.SourceSansBold
    speedLabel.TextSize = 16
    speedLabel.Parent = statusFrame
    
    -- Command List GUI
    local commandFrame = Instance.new("Frame")
    commandFrame.Name = "CommandFrame"
    commandFrame.Size = UDim2.new(0, 300, 0, 400)
    commandFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    commandFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    commandFrame.BackgroundTransparency = 0.2
    commandFrame.BorderSizePixel = 0
    commandFrame.Visible = false
    commandFrame.Parent = screenGui
    
    -- Round corners for command frame
    local cmdCorner = Instance.new("UICorner")
    cmdCorner.CornerRadius = UDim.new(0, 8)
    cmdCorner.Parent = commandFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    titleLabel.BackgroundTransparency = 0.2
    titleLabel.Text = "Command List"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 20
    titleLabel.Parent = commandFrame
    
    -- Round corners for title
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleLabel
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 18
    closeButton.Parent = titleLabel
    
    -- Round corners for close button
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 15)
    closeCorner.Parent = closeButton
    
    -- Scrolling frame for commands
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -50)
    scrollFrame.Position = UDim2.new(0, 10, 0, 45)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
    scrollFrame.Parent = commandFrame
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        commandFrame.Visible = false
        COMMAND_GUI_VISIBLE = false
    end)
    
    return {
        screenGui = screenGui,
        statusFrame = statusFrame,
        flyStatus = flyStatus,
        noclipStatus = noclipStatus,
        seaStatus = seaStatus,
        speedLabel = speedLabel,
        commandFrame = commandFrame,
        scrollFrame = scrollFrame
    }
end

-- Update GUI
local function updateGui(gui)
    gui.flyStatus.Text = "Flying: " .. (FLYING and "ON" or "OFF")
    gui.noclipStatus.Text = "Noclip: " .. (NOCLIP and "ON" or "OFF")
    gui.seaStatus.Text = "SEA Mode: " .. (SEA_MODE and "ON" or "OFF")
    gui.speedLabel.Text = "Speed: " .. SPEED
    
    -- Update colors
    gui.flyStatus.TextColor3 = FLYING and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
    gui.noclipStatus.TextColor3 = NOCLIP and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
    gui.seaStatus.TextColor3 = SEA_MODE and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
end

-- Populate command list
local function populateCommandList(gui)
    local scrollFrame = gui.scrollFrame
    
    -- Clear existing items
    for _, child in pairs(scrollFrame:GetChildren()) do
        child:Destroy()
    end
    
    -- Add command descriptions
    local yOffset = 5
    local padding = 10
    
    for _, cmd in ipairs(COMMANDS) do
        local cmdFrame = Instance.new("Frame")
        cmdFrame.Name = cmd.name .. "Frame"
        cmdFrame.Size = UDim2.new(1, -10, 0, 70)
        cmdFrame.Position = UDim2.new(0, 5, 0, yOffset)
        cmdFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        cmdFrame.BackgroundTransparency = 0.3
        cmdFrame.BorderSizePixel = 0
        cmdFrame.Parent = scrollFrame
        
        -- Round corners
        local cmdCorner = Instance.new("UICorner")
        cmdCorner.CornerRadius = UDim.new(0, 6)
        cmdCorner.Parent = cmdFrame
        
        -- Command name
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(1, -10, 0, 20)
        nameLabel.Position = UDim2.new(0, 5, 0, 5)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = cmd.name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextSize = 16
        nameLabel.Parent = cmdFrame
        
        -- Command description
        local descLabel = Instance.new("TextLabel")
        descLabel.Name = "DescLabel"
        descLabel.Size = UDim2.new(1, -10, 0, 40)
        descLabel.Position = UDim2.new(0, 5, 0, 25)
        descLabel.BackgroundTransparency = 1
        descLabel.Text = cmd.description
        descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        descLabel.TextXAlignment = Enum.TextXAlignment.Left
        descLabel.TextYAlignment = Enum.TextYAlignment.Top
        descLabel.TextWrapped = true
        descLabel.Font = Enum.Font.SourceSans
        descLabel.TextSize = 14
        descLabel.Parent = cmdFrame
        
        yOffset = yOffset + cmdFrame.Size.Y.Offset + padding
    end
    
    -- Update canvas size
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

-- Flying functions
local function startFlying()
    if FLYING then return end
    
    FLYING = true
    
    -- Disable auto-rotation
    humanoid.AutoRotate = false
    
    -- Create necessary body movers
    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.Name = "FlyGyro"
    bodyGyro.P = 9e4
    bodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.Parent = rootPart
    
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Name = "FlyVelocity"
    bodyVelocity.Velocity = Vector3.new(0, 0.1, 0)
    bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    bodyVelocity.Parent = rootPart
    
    -- Flying loop
    RunService:BindToRenderStep("Flying", Enum.RenderPriority.Character.Value, function()
        if not FLYING then return end
        
        local lookVector = camera.CFrame.LookVector
        local rightVector = camera.CFrame.RightVector
        local upVector = camera.CFrame.UpVector
        
        -- Calculate movement direction
        local moveDirection = Vector3.new(0, 0, 0)
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + lookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - lookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - rightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + rightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + upVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection = moveDirection - upVector
        end
        
        -- Normalize direction if it's not zero
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit
        end
        
        -- Apply velocity
        bodyVelocity.Velocity = moveDirection * SPEED
        
        -- Update orientation
        if moveDirection.Magnitude > 0 then
            bodyGyro.CFrame = CFrame.lookAt(rootPart.Position, rootPart.Position + moveDirection)
        else
            bodyGyro.CFrame = CFrame.lookAt(rootPart.Position, rootPart.Position + lookVector)
        end
    end)
end

local function stopFlying()
    if not FLYING then return end
    
    FLYING = false
    
    -- Unbind flying loop
    RunService:UnbindFromRenderStep("Flying")
    
    -- Remove body movers
    for _, child in pairs(rootPart:GetChildren()) do
        if child:IsA("BodyGyro") or child:IsA("BodyVelocity") then
            child:Destroy()
        end
    end
    
    -- Re-enable auto-rotation
    humanoid.AutoRotate = true
end

-- Improved Noclip function
local function toggleNoclip()
    NOCLIP = not NOCLIP
    
    if NOCLIP then
        -- Connect noclip function to RunService
        local noclipConnection = RunService.Stepped:Connect(function()
            if not NOCLIP then return end
            
            -- Set CanCollide to false for all character parts
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
        
        -- Store connection in character for cleanup
        character:SetAttribute("NoclipConnection", true)
        character._noclipConnection = noclipConnection
    else
        -- Disconnect noclip function
        if character._noclipConnection then
            character._noclipConnection:Disconnect()
            character._noclipConnection = nil
        end
        
        -- Reset collision
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
    end
end

-- SEA Mode (Save position and Emergency Ascent)
local function toggleSeaMode()
    SEA_MODE = not SEA_MODE
    
    if not SEA_MODE then
        -- Disconnect health monitoring if it exists
        if character._healthConnection then
            character._healthConnection:Disconnect()
            character._healthConnection = nil
        end
    else
        -- Connect health monitoring
        character._healthConnection = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            local currentHealth = humanoid.Health
            local maxHealth = humanoid.MaxHealth
            local healthPercent = (currentHealth / maxHealth) * 100
            
            -- If health drops below threshold and we're not already ascending
            if healthPercent <= LOW_HEALTH_THRESHOLD and LAST_HEALTH > currentHealth then
                -- Save current position if not already saved
                if not SAVED_POSITION then
                    SAVED_POSITION = rootPart.Position
                    print("Position saved at: " .. tostring(SAVED_POSITION))
                end
                
                -- Teleport upward
                rootPart.CFrame = CFrame.new(rootPart.Position.X, rootPart.Position.Y + TELEPORT_HEIGHT, rootPart.Position.Z)
            end
            
            -- If health recovers above threshold and we have a saved position
            if healthPercent > LOW_HEALTH_THRESHOLD and SAVED_POSITION and LAST_HEALTH < currentHealth then
                -- Teleport back to saved position
                rootPart.CFrame = CFrame.new(SAVED_POSITION)
                print("Teleported back to saved position")
                SAVED_POSITION = nil
            end
            
            LAST_HEALTH = currentHealth
        end)
    end
end

-- Command handling
local function setupCommands()
    COMMANDS = {
        {
            name = "/fly",
            description = "Toggle flying mode. You can also use the F key.",
            action = function()
                if FLYING then
                    stopFlying()
                else
                    startFlying()
                end
                return "Flying: " .. (FLYING and "ON" or "OFF")
            end
        },
        {
            name = "/noclip or /phase",
            description = "Toggle noclip/phase mode to pass through objects. You can also use the X key.",
            action = function()
                toggleNoclip()
                return "Noclip: " .. (NOCLIP and "ON" or "OFF")
            end
        },
        {
            name = "/sea",
            description = "Toggle SEA mode (Save position & Emergency Ascent). When health drops below 50%, you'll teleport upward. When health recovers, you'll return to saved position.",
            action = function()
                toggleSeaMode()
                return "SEA Mode: " .. (SEA_MODE and "ON" or "OFF")
            end
        },
        {
            name = "/speed [number]",
            description = "Set flying speed (10-500). Example: /speed 100",
            action = function(args)
                local newSpeed = tonumber(args)
                if newSpeed and newSpeed >= 10 and newSpeed <= 500 then
                    SPEED = newSpeed
                    return "Speed set to " .. SPEED
                else
                    return "Invalid speed. Use a number between 10 and 500."
                end
            end
        },
        {
            name = "/command",
            description = "Show or hide this command list. You can also press the C key.",
            action = function()
                COMMAND_GUI_VISIBLE = not COMMAND_GUI_VISIBLE
                return "Command list: " .. (COMMAND_GUI_VISIBLE and "SHOWN" or "HIDDEN")
            end
        },
        {
            name = "/reset",
            description = "Reset all settings to default values.",
            action = function()
                FLYING = false
                NOCLIP = false
                SEA_MODE = false
                SPEED = 50
                stopFlying()
                toggleNoclip()
                toggleSeaMode()
                return "All settings reset to default."
            end
        }
    }
end

-- Chat command handling
local function setupChatCommands()
    player.Chatted:Connect(function(message)
        local command, args = string.match(message, "^(/[%w]+)%s*(.*)")
        
        if not command then return end
        
        -- Process command
        for _, cmd in ipairs(COMMANDS) do
            local cmdName = string.match(cmd.name, "^(/[%w]+)")
            if cmdName and cmdName:lower() == command:lower() then
                local response = cmd.action(args)
                print("[Command] " .. response)
                return
            end
        end
        
        -- Special case for /phase as an alias for /noclip
        if command:lower() == "/phase" then
            for _, cmd in ipairs(COMMANDS) do
                if string.match(cmd.name, "^/noclip") then
                    local response = cmd.action()
                    print("[Command] " .. response)
                    return
                end
            end
        end
    end)
end

-- Key bindings
local function setupKeyBindings()
    -- Flying toggle (F key)
    ContextActionService:BindAction("ToggleFlying", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            if FLYING then
                stopFlying()
            else
                startFlying()
            end
        end
    end, false, Enum.KeyCode.F)
    
    -- Noclip toggle (X key)
    ContextActionService:BindAction("ToggleNoclip", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            toggleNoclip()
        end
    end, false, Enum.KeyCode.X)
    
    -- Speed adjustment (Q and E keys)
    ContextActionService:BindAction("IncreaseSpeed", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            SPEED = math.min(SPEED + 10, 500)
        end
    end, false, Enum.KeyCode.E)
    
    ContextActionService:BindAction("DecreaseSpeed", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            SPEED = math.max(SPEED - 10, 10)
        end
    end, false, Enum.KeyCode.Q)
    
    -- Command list toggle (C key)
    ContextActionService:BindAction("ToggleCommandList", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            COMMAND_GUI_VISIBLE = not COMMAND_GUI_VISIBLE
        end
    end, false, Enum.KeyCode.C)
    
    -- SEA mode toggle (R key)
    ContextActionService:BindAction("ToggleSeaMode", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then
            toggleSeaMode()
        end
    end, false, Enum.KeyCode.R)
end

-- Character handling
local function setupCharacter(char)
    character = char
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    LAST_HEALTH = humanoid.Health
    
    -- Reset states
    FLYING = false
    NOCLIP = false
    SAVED_POSITION = nil
    
    -- Reset SEA mode if it was enabled
    if SEA_MODE then
        toggleSeaMode()
        toggleSeaMode()
    end
    
    -- Handle character death
    humanoid.Died:Connect(function()
        stopFlying()
        if character._noclipConnection then
            character._noclipConnection:Disconnect()
            character._noclipConnection = nil
        end
        if character._healthConnection then
            character._healthConnection:Disconnect()
            character._healthConnection = nil
        end
    end)
end

-- Main initialization
local function initialize()
    print("Initializing Flying Script...")
    
    -- Setup commands
    setupCommands()
    
    -- Create GUI
    local gui = createGui()
    
    -- Populate command list
    populateCommandList(gui)
    
    -- Setup chat commands
    setupChatCommands()
    
    -- Setup key bindings
    setupKeyBindings()
    
    -- Setup character
    setupCharacter(character)
    
    -- Handle character added
    player.CharacterAdded:Connect(setupCharacter)
    
    -- Update GUI periodically
    RunService.Heartbeat:Connect(function()
        updateGui(gui)
        gui.commandFrame.Visible = COMMAND_GUI_VISIBLE
    end)
    
    print("Flying Script initialized successfully!")
    print("Press F to toggle flying, X for noclip, C for command list")
end

-- Start the script
initialize()
